/*
 * This file is generated by jOOQ.
 */
package sts.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sts.generated.Keys;
import sts.generated.Mydev;
import sts.generated.enums.StsUserRole;
import sts.generated.tables.records.StsUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StsUser extends TableImpl<StsUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydev.sts_user</code>
     */
    public static final StsUser STS_USER = new StsUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StsUserRecord> getRecordType() {
        return StsUserRecord.class;
    }

    /**
     * The column <code>mydev.sts_user.user_id</code>.
     */
    public final TableField<StsUserRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydev.sts_user.first_name</code>.
     */
    public final TableField<StsUserRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>mydev.sts_user.last_name</code>.
     */
    public final TableField<StsUserRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>mydev.sts_user.email</code>.
     */
    public final TableField<StsUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>mydev.sts_user.login</code>.
     */
    public final TableField<StsUserRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>mydev.sts_user.passward</code>.
     */
    public final TableField<StsUserRecord, String> PASSWARD = createField(DSL.name("passward"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>mydev.sts_user.role</code>.
     */
    public final TableField<StsUserRecord, StsUserRole> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(5).asEnumDataType(sts.generated.enums.StsUserRole.class), this, "");

    /**
     * The column <code>mydev.sts_user.cash_balance</code>.
     */
    public final TableField<StsUserRecord, BigDecimal> CASH_BALANCE = createField(DSL.name("cash_balance"), SQLDataType.DECIMAL(13, 2), this, "");

    private StsUser(Name alias, Table<StsUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private StsUser(Name alias, Table<StsUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydev.sts_user</code> table reference
     */
    public StsUser(String alias) {
        this(DSL.name(alias), STS_USER);
    }

    /**
     * Create an aliased <code>mydev.sts_user</code> table reference
     */
    public StsUser(Name alias) {
        this(alias, STS_USER);
    }

    /**
     * Create a <code>mydev.sts_user</code> table reference
     */
    public StsUser() {
        this(DSL.name("sts_user"), null);
    }

    public <O extends Record> StsUser(Table<O> child, ForeignKey<O, StsUserRecord> key) {
        super(child, key, STS_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mydev.MYDEV;
    }

    @Override
    public Identity<StsUserRecord, Integer> getIdentity() {
        return (Identity<StsUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StsUserRecord> getPrimaryKey() {
        return Keys.KEY_STS_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<StsUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STS_USER_IDX_UNIQ_LOGIN);
    }

    @Override
    public StsUser as(String alias) {
        return new StsUser(DSL.name(alias), this);
    }

    @Override
    public StsUser as(Name alias) {
        return new StsUser(alias, this);
    }

    @Override
    public StsUser as(Table<?> alias) {
        return new StsUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StsUser rename(String name) {
        return new StsUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsUser rename(Name name) {
        return new StsUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsUser rename(Table<?> name) {
        return new StsUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, StsUserRole, BigDecimal> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super StsUserRole, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super StsUserRole, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
