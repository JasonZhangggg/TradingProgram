/*
 * This file is generated by jOOQ.
 */
package sts.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sts.generated.Indexes;
import sts.generated.Keys;
import sts.generated.Mydev;
import sts.generated.enums.StsStockHistoryPriceType;
import sts.generated.tables.records.StsStockHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StsStockHistory extends TableImpl<StsStockHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydev.sts_stock_history</code>
     */
    public static final StsStockHistory STS_STOCK_HISTORY = new StsStockHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StsStockHistoryRecord> getRecordType() {
        return StsStockHistoryRecord.class;
    }

    /**
     * The column <code>mydev.sts_stock_history.uniqid</code>.
     */
    public final TableField<StsStockHistoryRecord, Integer> UNIQID = createField(DSL.name("uniqid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydev.sts_stock_history.ticker</code>.
     */
    public final TableField<StsStockHistoryRecord, String> TICKER = createField(DSL.name("ticker"), SQLDataType.CHAR(4), this, "");

    /**
     * The column <code>mydev.sts_stock_history.price</code>.
     */
    public final TableField<StsStockHistoryRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.DECIMAL(13, 2), this, "");

    /**
     * The column <code>mydev.sts_stock_history.price_type</code>.
     */
    public final TableField<StsStockHistoryRecord, StsStockHistoryPriceType> PRICE_TYPE = createField(DSL.name("price_type"), SQLDataType.VARCHAR(6).asEnumDataType(sts.generated.enums.StsStockHistoryPriceType.class), this, "");

    /**
     * The column <code>mydev.sts_stock_history.generated_at</code>.
     */
    public final TableField<StsStockHistoryRecord, LocalDateTime> GENERATED_AT = createField(DSL.name("generated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>mydev.sts_stock_history.market_day</code>.
     */
    public final TableField<StsStockHistoryRecord, Integer> MARKET_DAY = createField(DSL.name("market_day"), SQLDataType.INTEGER, this, "");

    private StsStockHistory(Name alias, Table<StsStockHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private StsStockHistory(Name alias, Table<StsStockHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydev.sts_stock_history</code> table reference
     */
    public StsStockHistory(String alias) {
        this(DSL.name(alias), STS_STOCK_HISTORY);
    }

    /**
     * Create an aliased <code>mydev.sts_stock_history</code> table reference
     */
    public StsStockHistory(Name alias) {
        this(alias, STS_STOCK_HISTORY);
    }

    /**
     * Create a <code>mydev.sts_stock_history</code> table reference
     */
    public StsStockHistory() {
        this(DSL.name("sts_stock_history"), null);
    }

    public <O extends Record> StsStockHistory(Table<O> child, ForeignKey<O, StsStockHistoryRecord> key) {
        super(child, key, STS_STOCK_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mydev.MYDEV;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STS_STOCK_HISTORY_MARKET_DAY, Indexes.STS_STOCK_HISTORY_TICKER);
    }

    @Override
    public Identity<StsStockHistoryRecord, Integer> getIdentity() {
        return (Identity<StsStockHistoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StsStockHistoryRecord> getPrimaryKey() {
        return Keys.KEY_STS_STOCK_HISTORY_PRIMARY;
    }

    @Override
    public List<ForeignKey<StsStockHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STS_STOCK_HISTORY_IBFK_1, Keys.STS_STOCK_HISTORY_IBFK_2);
    }

    private transient StsStock _stsStock;
    private transient StsMarketHistory _stsMarketHistory;

    /**
     * Get the implicit join path to the <code>mydev.sts_stock</code> table.
     */
    public StsStock stsStock() {
        if (_stsStock == null)
            _stsStock = new StsStock(this, Keys.STS_STOCK_HISTORY_IBFK_1);

        return _stsStock;
    }

    /**
     * Get the implicit join path to the <code>mydev.sts_market_history</code>
     * table.
     */
    public StsMarketHistory stsMarketHistory() {
        if (_stsMarketHistory == null)
            _stsMarketHistory = new StsMarketHistory(this, Keys.STS_STOCK_HISTORY_IBFK_2);

        return _stsMarketHistory;
    }

    @Override
    public StsStockHistory as(String alias) {
        return new StsStockHistory(DSL.name(alias), this);
    }

    @Override
    public StsStockHistory as(Name alias) {
        return new StsStockHistory(alias, this);
    }

    @Override
    public StsStockHistory as(Table<?> alias) {
        return new StsStockHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StsStockHistory rename(String name) {
        return new StsStockHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsStockHistory rename(Name name) {
        return new StsStockHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsStockHistory rename(Table<?> name) {
        return new StsStockHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, BigDecimal, StsStockHistoryPriceType, LocalDateTime, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super BigDecimal, ? super StsStockHistoryPriceType, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super BigDecimal, ? super StsStockHistoryPriceType, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
