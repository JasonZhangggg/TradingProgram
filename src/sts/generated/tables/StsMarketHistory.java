/*
 * This file is generated by jOOQ.
 */
package sts.generated.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sts.generated.Keys;
import sts.generated.Mydev;
import sts.generated.tables.records.StsMarketHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StsMarketHistory extends TableImpl<StsMarketHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydev.sts_market_history</code>
     */
    public static final StsMarketHistory STS_MARKET_HISTORY = new StsMarketHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StsMarketHistoryRecord> getRecordType() {
        return StsMarketHistoryRecord.class;
    }

    /**
     * The column <code>mydev.sts_market_history.market_day</code>.
     */
    public final TableField<StsMarketHistoryRecord, Integer> MARKET_DAY = createField(DSL.name("market_day"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydev.sts_market_history.open_time</code>.
     */
    public final TableField<StsMarketHistoryRecord, LocalDateTime> OPEN_TIME = createField(DSL.name("open_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>mydev.sts_market_history.close_time</code>.
     */
    public final TableField<StsMarketHistoryRecord, LocalDateTime> CLOSE_TIME = createField(DSL.name("close_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>mydev.sts_market_history.shares_exchanged</code>.
     */
    public final TableField<StsMarketHistoryRecord, Integer> SHARES_EXCHANGED = createField(DSL.name("shares_exchanged"), SQLDataType.INTEGER, this, "");

    private StsMarketHistory(Name alias, Table<StsMarketHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private StsMarketHistory(Name alias, Table<StsMarketHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydev.sts_market_history</code> table reference
     */
    public StsMarketHistory(String alias) {
        this(DSL.name(alias), STS_MARKET_HISTORY);
    }

    /**
     * Create an aliased <code>mydev.sts_market_history</code> table reference
     */
    public StsMarketHistory(Name alias) {
        this(alias, STS_MARKET_HISTORY);
    }

    /**
     * Create a <code>mydev.sts_market_history</code> table reference
     */
    public StsMarketHistory() {
        this(DSL.name("sts_market_history"), null);
    }

    public <O extends Record> StsMarketHistory(Table<O> child, ForeignKey<O, StsMarketHistoryRecord> key) {
        super(child, key, STS_MARKET_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mydev.MYDEV;
    }

    @Override
    public Identity<StsMarketHistoryRecord, Integer> getIdentity() {
        return (Identity<StsMarketHistoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StsMarketHistoryRecord> getPrimaryKey() {
        return Keys.KEY_STS_MARKET_HISTORY_PRIMARY;
    }

    @Override
    public StsMarketHistory as(String alias) {
        return new StsMarketHistory(DSL.name(alias), this);
    }

    @Override
    public StsMarketHistory as(Name alias) {
        return new StsMarketHistory(alias, this);
    }

    @Override
    public StsMarketHistory as(Table<?> alias) {
        return new StsMarketHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StsMarketHistory rename(String name) {
        return new StsMarketHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsMarketHistory rename(Name name) {
        return new StsMarketHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsMarketHistory rename(Table<?> name) {
        return new StsMarketHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
