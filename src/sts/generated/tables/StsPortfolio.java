/*
 * This file is generated by jOOQ.
 */
package sts.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sts.generated.Indexes;
import sts.generated.Keys;
import sts.generated.Mydev;
import sts.generated.tables.records.StsPortfolioRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StsPortfolio extends TableImpl<StsPortfolioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydev.sts_portfolio</code>
     */
    public static final StsPortfolio STS_PORTFOLIO = new StsPortfolio();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StsPortfolioRecord> getRecordType() {
        return StsPortfolioRecord.class;
    }

    /**
     * The column <code>mydev.sts_portfolio.user_id</code>.
     */
    public final TableField<StsPortfolioRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mydev.sts_portfolio.ticker</code>.
     */
    public final TableField<StsPortfolioRecord, String> TICKER = createField(DSL.name("ticker"), SQLDataType.CHAR(4), this, "");

    /**
     * The column <code>mydev.sts_portfolio.shares</code>.
     */
    public final TableField<StsPortfolioRecord, Integer> SHARES = createField(DSL.name("shares"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private StsPortfolio(Name alias, Table<StsPortfolioRecord> aliased) {
        this(alias, aliased, null);
    }

    private StsPortfolio(Name alias, Table<StsPortfolioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydev.sts_portfolio</code> table reference
     */
    public StsPortfolio(String alias) {
        this(DSL.name(alias), STS_PORTFOLIO);
    }

    /**
     * Create an aliased <code>mydev.sts_portfolio</code> table reference
     */
    public StsPortfolio(Name alias) {
        this(alias, STS_PORTFOLIO);
    }

    /**
     * Create a <code>mydev.sts_portfolio</code> table reference
     */
    public StsPortfolio() {
        this(DSL.name("sts_portfolio"), null);
    }

    public <O extends Record> StsPortfolio(Table<O> child, ForeignKey<O, StsPortfolioRecord> key) {
        super(child, key, STS_PORTFOLIO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mydev.MYDEV;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STS_PORTFOLIO_TICKER, Indexes.STS_PORTFOLIO_USER_ID);
    }

    @Override
    public List<ForeignKey<StsPortfolioRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STS_PORTFOLIO_IBFK_1, Keys.STS_PORTFOLIO_IBFK_2);
    }

    private transient StsUser _stsUser;
    private transient StsStock _stsStock;

    /**
     * Get the implicit join path to the <code>mydev.sts_user</code> table.
     */
    public StsUser stsUser() {
        if (_stsUser == null)
            _stsUser = new StsUser(this, Keys.STS_PORTFOLIO_IBFK_1);

        return _stsUser;
    }

    /**
     * Get the implicit join path to the <code>mydev.sts_stock</code> table.
     */
    public StsStock stsStock() {
        if (_stsStock == null)
            _stsStock = new StsStock(this, Keys.STS_PORTFOLIO_IBFK_2);

        return _stsStock;
    }

    @Override
    public StsPortfolio as(String alias) {
        return new StsPortfolio(DSL.name(alias), this);
    }

    @Override
    public StsPortfolio as(Name alias) {
        return new StsPortfolio(alias, this);
    }

    @Override
    public StsPortfolio as(Table<?> alias) {
        return new StsPortfolio(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StsPortfolio rename(String name) {
        return new StsPortfolio(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsPortfolio rename(Name name) {
        return new StsPortfolio(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StsPortfolio rename(Table<?> name) {
        return new StsPortfolio(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
